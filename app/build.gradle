def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}


// Dummy values
ext.signing = [
        enabled       : false,
        storeFilePath : '.keystore',
        storePassword : 'password',
        keyAlias      : 'alias',
        keyPassword   : 'password',
]

apply plugin: 'com.android.application'
if (file('signing.gradle').exists()) {
    apply from: 'signing.gradle'
}

def git = org.ajoberstar.grgit.Grgit.open(file('..'))
ext.revision = git.head().getAbbreviatedId(7)

android {
    compileSdkVersion 26
    //buildToolsVersion "25.0.1"

    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }

    defaultConfig {
        applicationId "org.openxcom.extended"
        minSdkVersion 16
        targetSdkVersion 26

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_static", "-DANDROID_ARM_MODE=arm", "-DOPENXCOM_VERSION_STRING=${project.revision}"
                /* abiFilters "armeabi-v7a", "x86", "x86_64", "arm64-v8a" */
                abiFilters "arm64-v8a"
                cppFlags "-std=c++11", "-fexceptions", "-frtti"
            }
        }
    }

    if (project.signing.enabled) {
        signingConfigs {
            release {
                storeFile file(project.signing.storeFilePath)
                storePassword project.signing.storePassword
                keyAlias project.signing.keyAlias
                keyPassword project.signing.keyPassword

                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        output.outputFile = new File(output.outputFile.parent,
                                    output.outputFile.name.replace("app-release",
                                        "OpenXcom-v1.0-g${project.revision}"))
                    }
                }
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
                externalNativeBuild {
                    cmake {
                        cFlags "-O3", "-ffast-math"
                        cppFlags "-O3", "-ffast-math"
                    }

                }
            }
        }
    }

    tasks.withType(Zip) {
        task ->
            task.doLast {
                ant.checksum file: it.archivePath, algorithm: "MD5"
            }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def getFolder(resource) {
    def binDir = file('src/main/jni/OpenXcom/bin/' + resource);
    return binDir;
}

task packBin(description: 'Update data files.') {
    def index = 0;
    ['common', 'standard', 'UFO', 'TFTD'].each { String res ->
        def zip = task("zip" + res, type: Zip)
        zip.doFirst { println('Packing ' + res + '...') }
        zip.destinationDir = file('src/main/assets')
        zip.archiveName = index.toString() + "_" + res + '.zip'
        zip.from getFolder(res)
        zip.into res
        zip.execute()
        index++;
    }
    def zipTranslations = task("zipTranslations", type: Zip)
    zipTranslations.doFirst { println('Packing translations...' )}
    zipTranslations.destinationDir = file('src/main/assets')
    zipTranslations.archiveName = '7_translations.zip'
    zipTranslations.from getFolder('translations/output')
    zipTranslations.execute()
}

gradle.projectsEvaluated {
    preBuild.dependsOn packBin
}
